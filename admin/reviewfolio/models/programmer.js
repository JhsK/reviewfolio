// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Programmer = sequelize.define('programmer', {
    career: {
      type: DataTypes.INTEGER,
    },
    point: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    refundPoint: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    subMallId: {
      type: DataTypes.STRING,
    },
    bank: {
      type: DataTypes.STRING,
    },
    accountNumber: {
      type: DataTypes.STRING,
    },
    checked: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'programmer',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Programmer.associate = (models) => {
    Programmer.belongsTo(models.user, {
      foreignKey: {
        name: 'userIdKey',
        field: 'UserId',
      },
      as: 'user',
    });
    Programmer.belongsToMany(models.requestPost, {
      through: 'requestReview',
      foreignKey: 'ProgrammerId',
      otherKey: 'RequestPostId',
      as: 'requestPostThroughRequestReviews',
    });
    Programmer.hasMany(models.application, {
      foreignKey: {
        name: 'programmerIdKey',
        field: 'ProgrammerId',
      },
      as: 'applications',
    });
    Programmer.hasMany(models.image, {
      foreignKey: {
        name: 'programmerIdKey',
        field: 'ProgrammerId',
      },
      as: 'images',
    });
  };

  return Programmer;
};
